// Code generated by ogen, DO NOT EDIT.

package ogencl

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type BasicAuth struct {
	Username string
	Password string
}

// GetUsername returns the value of Username.
func (s *BasicAuth) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *BasicAuth) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *BasicAuth) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *BasicAuth) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/CreatePaymentRes
type CreatePaymentRes struct {
	ID                   string                                  `json:"id"`
	Status               PaymentStatus                           `json:"status"`
	Paid                 bool                                    `json:"paid"`
	Amount               CreatePaymentResAmount                  `json:"amount"`
	AuthorizationDetails OptCreatePaymentResAuthorizationDetails `json:"authorization_details"`
	CreatedAt            time.Time                               `json:"created_at"`
	Description          OptString                               `json:"description"`
	ExpiresAt            OptDateTime                             `json:"expires_at"`
	Metadata             OptMetadata                             `json:"metadata"`
	PaymentMethod        OptCreatePaymentResPaymentMethod        `json:"payment_method"`
	Recipient            CreatePaymentResRecipient               `json:"recipient"`
	Refundable           bool                                    `json:"refundable"`
	Test                 bool                                    `json:"test"`
	IncomeAmount         OptCreatePaymentResIncomeAmount         `json:"income_amount"`
	Confirmation         OptCreatePaymentResConfirmation         `json:"confirmation"`
}

// GetID returns the value of ID.
func (s *CreatePaymentRes) GetID() string {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *CreatePaymentRes) GetStatus() PaymentStatus {
	return s.Status
}

// GetPaid returns the value of Paid.
func (s *CreatePaymentRes) GetPaid() bool {
	return s.Paid
}

// GetAmount returns the value of Amount.
func (s *CreatePaymentRes) GetAmount() CreatePaymentResAmount {
	return s.Amount
}

// GetAuthorizationDetails returns the value of AuthorizationDetails.
func (s *CreatePaymentRes) GetAuthorizationDetails() OptCreatePaymentResAuthorizationDetails {
	return s.AuthorizationDetails
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CreatePaymentRes) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetDescription returns the value of Description.
func (s *CreatePaymentRes) GetDescription() OptString {
	return s.Description
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *CreatePaymentRes) GetExpiresAt() OptDateTime {
	return s.ExpiresAt
}

// GetMetadata returns the value of Metadata.
func (s *CreatePaymentRes) GetMetadata() OptMetadata {
	return s.Metadata
}

// GetPaymentMethod returns the value of PaymentMethod.
func (s *CreatePaymentRes) GetPaymentMethod() OptCreatePaymentResPaymentMethod {
	return s.PaymentMethod
}

// GetRecipient returns the value of Recipient.
func (s *CreatePaymentRes) GetRecipient() CreatePaymentResRecipient {
	return s.Recipient
}

// GetRefundable returns the value of Refundable.
func (s *CreatePaymentRes) GetRefundable() bool {
	return s.Refundable
}

// GetTest returns the value of Test.
func (s *CreatePaymentRes) GetTest() bool {
	return s.Test
}

// GetIncomeAmount returns the value of IncomeAmount.
func (s *CreatePaymentRes) GetIncomeAmount() OptCreatePaymentResIncomeAmount {
	return s.IncomeAmount
}

// GetConfirmation returns the value of Confirmation.
func (s *CreatePaymentRes) GetConfirmation() OptCreatePaymentResConfirmation {
	return s.Confirmation
}

// SetID sets the value of ID.
func (s *CreatePaymentRes) SetID(val string) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *CreatePaymentRes) SetStatus(val PaymentStatus) {
	s.Status = val
}

// SetPaid sets the value of Paid.
func (s *CreatePaymentRes) SetPaid(val bool) {
	s.Paid = val
}

// SetAmount sets the value of Amount.
func (s *CreatePaymentRes) SetAmount(val CreatePaymentResAmount) {
	s.Amount = val
}

// SetAuthorizationDetails sets the value of AuthorizationDetails.
func (s *CreatePaymentRes) SetAuthorizationDetails(val OptCreatePaymentResAuthorizationDetails) {
	s.AuthorizationDetails = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CreatePaymentRes) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetDescription sets the value of Description.
func (s *CreatePaymentRes) SetDescription(val OptString) {
	s.Description = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *CreatePaymentRes) SetExpiresAt(val OptDateTime) {
	s.ExpiresAt = val
}

// SetMetadata sets the value of Metadata.
func (s *CreatePaymentRes) SetMetadata(val OptMetadata) {
	s.Metadata = val
}

// SetPaymentMethod sets the value of PaymentMethod.
func (s *CreatePaymentRes) SetPaymentMethod(val OptCreatePaymentResPaymentMethod) {
	s.PaymentMethod = val
}

// SetRecipient sets the value of Recipient.
func (s *CreatePaymentRes) SetRecipient(val CreatePaymentResRecipient) {
	s.Recipient = val
}

// SetRefundable sets the value of Refundable.
func (s *CreatePaymentRes) SetRefundable(val bool) {
	s.Refundable = val
}

// SetTest sets the value of Test.
func (s *CreatePaymentRes) SetTest(val bool) {
	s.Test = val
}

// SetIncomeAmount sets the value of IncomeAmount.
func (s *CreatePaymentRes) SetIncomeAmount(val OptCreatePaymentResIncomeAmount) {
	s.IncomeAmount = val
}

// SetConfirmation sets the value of Confirmation.
func (s *CreatePaymentRes) SetConfirmation(val OptCreatePaymentResConfirmation) {
	s.Confirmation = val
}

type CreatePaymentResAmount struct {
	Value    OptString `json:"value"`
	Currency OptString `json:"currency"`
}

// GetValue returns the value of Value.
func (s *CreatePaymentResAmount) GetValue() OptString {
	return s.Value
}

// GetCurrency returns the value of Currency.
func (s *CreatePaymentResAmount) GetCurrency() OptString {
	return s.Currency
}

// SetValue sets the value of Value.
func (s *CreatePaymentResAmount) SetValue(val OptString) {
	s.Value = val
}

// SetCurrency sets the value of Currency.
func (s *CreatePaymentResAmount) SetCurrency(val OptString) {
	s.Currency = val
}

type CreatePaymentResAuthorizationDetails struct {
	Rrn          OptString                                           `json:"rrn"`
	AuthCode     OptString                                           `json:"auth_code"`
	ThreeDSecure OptCreatePaymentResAuthorizationDetailsThreeDSecure `json:"three_d_secure"`
}

// GetRrn returns the value of Rrn.
func (s *CreatePaymentResAuthorizationDetails) GetRrn() OptString {
	return s.Rrn
}

// GetAuthCode returns the value of AuthCode.
func (s *CreatePaymentResAuthorizationDetails) GetAuthCode() OptString {
	return s.AuthCode
}

// GetThreeDSecure returns the value of ThreeDSecure.
func (s *CreatePaymentResAuthorizationDetails) GetThreeDSecure() OptCreatePaymentResAuthorizationDetailsThreeDSecure {
	return s.ThreeDSecure
}

// SetRrn sets the value of Rrn.
func (s *CreatePaymentResAuthorizationDetails) SetRrn(val OptString) {
	s.Rrn = val
}

// SetAuthCode sets the value of AuthCode.
func (s *CreatePaymentResAuthorizationDetails) SetAuthCode(val OptString) {
	s.AuthCode = val
}

// SetThreeDSecure sets the value of ThreeDSecure.
func (s *CreatePaymentResAuthorizationDetails) SetThreeDSecure(val OptCreatePaymentResAuthorizationDetailsThreeDSecure) {
	s.ThreeDSecure = val
}

type CreatePaymentResAuthorizationDetailsThreeDSecure struct {
	Applied OptBool `json:"applied"`
}

// GetApplied returns the value of Applied.
func (s *CreatePaymentResAuthorizationDetailsThreeDSecure) GetApplied() OptBool {
	return s.Applied
}

// SetApplied sets the value of Applied.
func (s *CreatePaymentResAuthorizationDetailsThreeDSecure) SetApplied(val OptBool) {
	s.Applied = val
}

type CreatePaymentResConfirmation struct {
	Type              CreatePaymentResConfirmationType `json:"type"`
	ConfirmationToken OptString                        `json:"confirmation_token"`
}

// GetType returns the value of Type.
func (s *CreatePaymentResConfirmation) GetType() CreatePaymentResConfirmationType {
	return s.Type
}

// GetConfirmationToken returns the value of ConfirmationToken.
func (s *CreatePaymentResConfirmation) GetConfirmationToken() OptString {
	return s.ConfirmationToken
}

// SetType sets the value of Type.
func (s *CreatePaymentResConfirmation) SetType(val CreatePaymentResConfirmationType) {
	s.Type = val
}

// SetConfirmationToken sets the value of ConfirmationToken.
func (s *CreatePaymentResConfirmation) SetConfirmationToken(val OptString) {
	s.ConfirmationToken = val
}

type CreatePaymentResConfirmationType string

const (
	CreatePaymentResConfirmationTypeEmbedded CreatePaymentResConfirmationType = "embedded"
)

// AllValues returns all CreatePaymentResConfirmationType values.
func (CreatePaymentResConfirmationType) AllValues() []CreatePaymentResConfirmationType {
	return []CreatePaymentResConfirmationType{
		CreatePaymentResConfirmationTypeEmbedded,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreatePaymentResConfirmationType) MarshalText() ([]byte, error) {
	switch s {
	case CreatePaymentResConfirmationTypeEmbedded:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreatePaymentResConfirmationType) UnmarshalText(data []byte) error {
	switch CreatePaymentResConfirmationType(data) {
	case CreatePaymentResConfirmationTypeEmbedded:
		*s = CreatePaymentResConfirmationTypeEmbedded
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreatePaymentResIncomeAmount struct {
	Value    OptString `json:"value"`
	Currency OptString `json:"currency"`
}

// GetValue returns the value of Value.
func (s *CreatePaymentResIncomeAmount) GetValue() OptString {
	return s.Value
}

// GetCurrency returns the value of Currency.
func (s *CreatePaymentResIncomeAmount) GetCurrency() OptString {
	return s.Currency
}

// SetValue sets the value of Value.
func (s *CreatePaymentResIncomeAmount) SetValue(val OptString) {
	s.Value = val
}

// SetCurrency sets the value of Currency.
func (s *CreatePaymentResIncomeAmount) SetCurrency(val OptString) {
	s.Currency = val
}

type CreatePaymentResPaymentMethod struct {
	Type  string                               `json:"type"`
	ID    string                               `json:"id"`
	Saved bool                                 `json:"saved"`
	Card  OptCreatePaymentResPaymentMethodCard `json:"card"`
	Title OptString                            `json:"title"`
}

// GetType returns the value of Type.
func (s *CreatePaymentResPaymentMethod) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *CreatePaymentResPaymentMethod) GetID() string {
	return s.ID
}

// GetSaved returns the value of Saved.
func (s *CreatePaymentResPaymentMethod) GetSaved() bool {
	return s.Saved
}

// GetCard returns the value of Card.
func (s *CreatePaymentResPaymentMethod) GetCard() OptCreatePaymentResPaymentMethodCard {
	return s.Card
}

// GetTitle returns the value of Title.
func (s *CreatePaymentResPaymentMethod) GetTitle() OptString {
	return s.Title
}

// SetType sets the value of Type.
func (s *CreatePaymentResPaymentMethod) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *CreatePaymentResPaymentMethod) SetID(val string) {
	s.ID = val
}

// SetSaved sets the value of Saved.
func (s *CreatePaymentResPaymentMethod) SetSaved(val bool) {
	s.Saved = val
}

// SetCard sets the value of Card.
func (s *CreatePaymentResPaymentMethod) SetCard(val OptCreatePaymentResPaymentMethodCard) {
	s.Card = val
}

// SetTitle sets the value of Title.
func (s *CreatePaymentResPaymentMethod) SetTitle(val OptString) {
	s.Title = val
}

type CreatePaymentResPaymentMethodCard struct {
	First6        OptString                                       `json:"first6"`
	Last4         OptString                                       `json:"last4"`
	ExpiryMonth   OptString                                       `json:"expiry_month"`
	ExpiryYear    OptString                                       `json:"expiry_year"`
	CardType      OptString                                       `json:"card_type"`
	CardProduct   OptCreatePaymentResPaymentMethodCardCardProduct `json:"card_product"`
	IssuerCountry OptString                                       `json:"issuer_country"`
	IssuerName    OptString                                       `json:"issuer_name"`
}

// GetFirst6 returns the value of First6.
func (s *CreatePaymentResPaymentMethodCard) GetFirst6() OptString {
	return s.First6
}

// GetLast4 returns the value of Last4.
func (s *CreatePaymentResPaymentMethodCard) GetLast4() OptString {
	return s.Last4
}

// GetExpiryMonth returns the value of ExpiryMonth.
func (s *CreatePaymentResPaymentMethodCard) GetExpiryMonth() OptString {
	return s.ExpiryMonth
}

// GetExpiryYear returns the value of ExpiryYear.
func (s *CreatePaymentResPaymentMethodCard) GetExpiryYear() OptString {
	return s.ExpiryYear
}

// GetCardType returns the value of CardType.
func (s *CreatePaymentResPaymentMethodCard) GetCardType() OptString {
	return s.CardType
}

// GetCardProduct returns the value of CardProduct.
func (s *CreatePaymentResPaymentMethodCard) GetCardProduct() OptCreatePaymentResPaymentMethodCardCardProduct {
	return s.CardProduct
}

// GetIssuerCountry returns the value of IssuerCountry.
func (s *CreatePaymentResPaymentMethodCard) GetIssuerCountry() OptString {
	return s.IssuerCountry
}

// GetIssuerName returns the value of IssuerName.
func (s *CreatePaymentResPaymentMethodCard) GetIssuerName() OptString {
	return s.IssuerName
}

// SetFirst6 sets the value of First6.
func (s *CreatePaymentResPaymentMethodCard) SetFirst6(val OptString) {
	s.First6 = val
}

// SetLast4 sets the value of Last4.
func (s *CreatePaymentResPaymentMethodCard) SetLast4(val OptString) {
	s.Last4 = val
}

// SetExpiryMonth sets the value of ExpiryMonth.
func (s *CreatePaymentResPaymentMethodCard) SetExpiryMonth(val OptString) {
	s.ExpiryMonth = val
}

// SetExpiryYear sets the value of ExpiryYear.
func (s *CreatePaymentResPaymentMethodCard) SetExpiryYear(val OptString) {
	s.ExpiryYear = val
}

// SetCardType sets the value of CardType.
func (s *CreatePaymentResPaymentMethodCard) SetCardType(val OptString) {
	s.CardType = val
}

// SetCardProduct sets the value of CardProduct.
func (s *CreatePaymentResPaymentMethodCard) SetCardProduct(val OptCreatePaymentResPaymentMethodCardCardProduct) {
	s.CardProduct = val
}

// SetIssuerCountry sets the value of IssuerCountry.
func (s *CreatePaymentResPaymentMethodCard) SetIssuerCountry(val OptString) {
	s.IssuerCountry = val
}

// SetIssuerName sets the value of IssuerName.
func (s *CreatePaymentResPaymentMethodCard) SetIssuerName(val OptString) {
	s.IssuerName = val
}

type CreatePaymentResPaymentMethodCardCardProduct struct {
	Code OptString `json:"code"`
	Name OptString `json:"name"`
}

// GetCode returns the value of Code.
func (s *CreatePaymentResPaymentMethodCardCardProduct) GetCode() OptString {
	return s.Code
}

// GetName returns the value of Name.
func (s *CreatePaymentResPaymentMethodCardCardProduct) GetName() OptString {
	return s.Name
}

// SetCode sets the value of Code.
func (s *CreatePaymentResPaymentMethodCardCardProduct) SetCode(val OptString) {
	s.Code = val
}

// SetName sets the value of Name.
func (s *CreatePaymentResPaymentMethodCardCardProduct) SetName(val OptString) {
	s.Name = val
}

type CreatePaymentResRecipient struct {
	AccountID OptString `json:"account_id"`
	GatewayID OptString `json:"gateway_id"`
}

// GetAccountID returns the value of AccountID.
func (s *CreatePaymentResRecipient) GetAccountID() OptString {
	return s.AccountID
}

// GetGatewayID returns the value of GatewayID.
func (s *CreatePaymentResRecipient) GetGatewayID() OptString {
	return s.GatewayID
}

// SetAccountID sets the value of AccountID.
func (s *CreatePaymentResRecipient) SetAccountID(val OptString) {
	s.AccountID = val
}

// SetGatewayID sets the value of GatewayID.
func (s *CreatePaymentResRecipient) SetGatewayID(val OptString) {
	s.GatewayID = val
}

// Ref: #/components/schemas/Metadata
type Metadata map[string]jx.Raw

func (s *Metadata) init() Metadata {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentResAuthorizationDetails returns new OptCreatePaymentResAuthorizationDetails with value set to v.
func NewOptCreatePaymentResAuthorizationDetails(v CreatePaymentResAuthorizationDetails) OptCreatePaymentResAuthorizationDetails {
	return OptCreatePaymentResAuthorizationDetails{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentResAuthorizationDetails is optional CreatePaymentResAuthorizationDetails.
type OptCreatePaymentResAuthorizationDetails struct {
	Value CreatePaymentResAuthorizationDetails
	Set   bool
}

// IsSet returns true if OptCreatePaymentResAuthorizationDetails was set.
func (o OptCreatePaymentResAuthorizationDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentResAuthorizationDetails) Reset() {
	var v CreatePaymentResAuthorizationDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentResAuthorizationDetails) SetTo(v CreatePaymentResAuthorizationDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentResAuthorizationDetails) Get() (v CreatePaymentResAuthorizationDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentResAuthorizationDetails) Or(d CreatePaymentResAuthorizationDetails) CreatePaymentResAuthorizationDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentResAuthorizationDetailsThreeDSecure returns new OptCreatePaymentResAuthorizationDetailsThreeDSecure with value set to v.
func NewOptCreatePaymentResAuthorizationDetailsThreeDSecure(v CreatePaymentResAuthorizationDetailsThreeDSecure) OptCreatePaymentResAuthorizationDetailsThreeDSecure {
	return OptCreatePaymentResAuthorizationDetailsThreeDSecure{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentResAuthorizationDetailsThreeDSecure is optional CreatePaymentResAuthorizationDetailsThreeDSecure.
type OptCreatePaymentResAuthorizationDetailsThreeDSecure struct {
	Value CreatePaymentResAuthorizationDetailsThreeDSecure
	Set   bool
}

// IsSet returns true if OptCreatePaymentResAuthorizationDetailsThreeDSecure was set.
func (o OptCreatePaymentResAuthorizationDetailsThreeDSecure) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentResAuthorizationDetailsThreeDSecure) Reset() {
	var v CreatePaymentResAuthorizationDetailsThreeDSecure
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentResAuthorizationDetailsThreeDSecure) SetTo(v CreatePaymentResAuthorizationDetailsThreeDSecure) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentResAuthorizationDetailsThreeDSecure) Get() (v CreatePaymentResAuthorizationDetailsThreeDSecure, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentResAuthorizationDetailsThreeDSecure) Or(d CreatePaymentResAuthorizationDetailsThreeDSecure) CreatePaymentResAuthorizationDetailsThreeDSecure {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentResConfirmation returns new OptCreatePaymentResConfirmation with value set to v.
func NewOptCreatePaymentResConfirmation(v CreatePaymentResConfirmation) OptCreatePaymentResConfirmation {
	return OptCreatePaymentResConfirmation{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentResConfirmation is optional CreatePaymentResConfirmation.
type OptCreatePaymentResConfirmation struct {
	Value CreatePaymentResConfirmation
	Set   bool
}

// IsSet returns true if OptCreatePaymentResConfirmation was set.
func (o OptCreatePaymentResConfirmation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentResConfirmation) Reset() {
	var v CreatePaymentResConfirmation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentResConfirmation) SetTo(v CreatePaymentResConfirmation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentResConfirmation) Get() (v CreatePaymentResConfirmation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentResConfirmation) Or(d CreatePaymentResConfirmation) CreatePaymentResConfirmation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentResIncomeAmount returns new OptCreatePaymentResIncomeAmount with value set to v.
func NewOptCreatePaymentResIncomeAmount(v CreatePaymentResIncomeAmount) OptCreatePaymentResIncomeAmount {
	return OptCreatePaymentResIncomeAmount{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentResIncomeAmount is optional CreatePaymentResIncomeAmount.
type OptCreatePaymentResIncomeAmount struct {
	Value CreatePaymentResIncomeAmount
	Set   bool
}

// IsSet returns true if OptCreatePaymentResIncomeAmount was set.
func (o OptCreatePaymentResIncomeAmount) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentResIncomeAmount) Reset() {
	var v CreatePaymentResIncomeAmount
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentResIncomeAmount) SetTo(v CreatePaymentResIncomeAmount) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentResIncomeAmount) Get() (v CreatePaymentResIncomeAmount, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentResIncomeAmount) Or(d CreatePaymentResIncomeAmount) CreatePaymentResIncomeAmount {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentResPaymentMethod returns new OptCreatePaymentResPaymentMethod with value set to v.
func NewOptCreatePaymentResPaymentMethod(v CreatePaymentResPaymentMethod) OptCreatePaymentResPaymentMethod {
	return OptCreatePaymentResPaymentMethod{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentResPaymentMethod is optional CreatePaymentResPaymentMethod.
type OptCreatePaymentResPaymentMethod struct {
	Value CreatePaymentResPaymentMethod
	Set   bool
}

// IsSet returns true if OptCreatePaymentResPaymentMethod was set.
func (o OptCreatePaymentResPaymentMethod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentResPaymentMethod) Reset() {
	var v CreatePaymentResPaymentMethod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentResPaymentMethod) SetTo(v CreatePaymentResPaymentMethod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentResPaymentMethod) Get() (v CreatePaymentResPaymentMethod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentResPaymentMethod) Or(d CreatePaymentResPaymentMethod) CreatePaymentResPaymentMethod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentResPaymentMethodCard returns new OptCreatePaymentResPaymentMethodCard with value set to v.
func NewOptCreatePaymentResPaymentMethodCard(v CreatePaymentResPaymentMethodCard) OptCreatePaymentResPaymentMethodCard {
	return OptCreatePaymentResPaymentMethodCard{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentResPaymentMethodCard is optional CreatePaymentResPaymentMethodCard.
type OptCreatePaymentResPaymentMethodCard struct {
	Value CreatePaymentResPaymentMethodCard
	Set   bool
}

// IsSet returns true if OptCreatePaymentResPaymentMethodCard was set.
func (o OptCreatePaymentResPaymentMethodCard) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentResPaymentMethodCard) Reset() {
	var v CreatePaymentResPaymentMethodCard
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentResPaymentMethodCard) SetTo(v CreatePaymentResPaymentMethodCard) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentResPaymentMethodCard) Get() (v CreatePaymentResPaymentMethodCard, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentResPaymentMethodCard) Or(d CreatePaymentResPaymentMethodCard) CreatePaymentResPaymentMethodCard {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreatePaymentResPaymentMethodCardCardProduct returns new OptCreatePaymentResPaymentMethodCardCardProduct with value set to v.
func NewOptCreatePaymentResPaymentMethodCardCardProduct(v CreatePaymentResPaymentMethodCardCardProduct) OptCreatePaymentResPaymentMethodCardCardProduct {
	return OptCreatePaymentResPaymentMethodCardCardProduct{
		Value: v,
		Set:   true,
	}
}

// OptCreatePaymentResPaymentMethodCardCardProduct is optional CreatePaymentResPaymentMethodCardCardProduct.
type OptCreatePaymentResPaymentMethodCardCardProduct struct {
	Value CreatePaymentResPaymentMethodCardCardProduct
	Set   bool
}

// IsSet returns true if OptCreatePaymentResPaymentMethodCardCardProduct was set.
func (o OptCreatePaymentResPaymentMethodCardCardProduct) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreatePaymentResPaymentMethodCardCardProduct) Reset() {
	var v CreatePaymentResPaymentMethodCardCardProduct
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreatePaymentResPaymentMethodCardCardProduct) SetTo(v CreatePaymentResPaymentMethodCardCardProduct) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreatePaymentResPaymentMethodCardCardProduct) Get() (v CreatePaymentResPaymentMethodCardCardProduct, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreatePaymentResPaymentMethodCardCardProduct) Or(d CreatePaymentResPaymentMethodCardCardProduct) CreatePaymentResPaymentMethodCardCardProduct {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetadata returns new OptMetadata with value set to v.
func NewOptMetadata(v Metadata) OptMetadata {
	return OptMetadata{
		Value: v,
		Set:   true,
	}
}

// OptMetadata is optional Metadata.
type OptMetadata struct {
	Value Metadata
	Set   bool
}

// IsSet returns true if OptMetadata was set.
func (o OptMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetadata) Reset() {
	var v Metadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetadata) SetTo(v Metadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetadata) Get() (v Metadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetadata) Or(d Metadata) Metadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPaymentConfirmation returns new OptPaymentConfirmation with value set to v.
func NewOptPaymentConfirmation(v PaymentConfirmation) OptPaymentConfirmation {
	return OptPaymentConfirmation{
		Value: v,
		Set:   true,
	}
}

// OptPaymentConfirmation is optional PaymentConfirmation.
type OptPaymentConfirmation struct {
	Value PaymentConfirmation
	Set   bool
}

// IsSet returns true if OptPaymentConfirmation was set.
func (o OptPaymentConfirmation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPaymentConfirmation) Reset() {
	var v PaymentConfirmation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPaymentConfirmation) SetTo(v PaymentConfirmation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPaymentConfirmation) Get() (v PaymentConfirmation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPaymentConfirmation) Or(d PaymentConfirmation) PaymentConfirmation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Payment
type Payment struct {
	// Сумма платежа. Иногда партнеры ЮKassa берут с
	// пользователя дополнительную комиссию, которая не
	// входит в эту сумму.
	Amount       PaymentAmount          `json:"amount"`
	Confirmation OptPaymentConfirmation `json:"confirmation"`
	// Автоматический прием  поступившего платежа.
	Capture OptBool `json:"capture"`
	// Описание транзакции (не более 128 символов), которое вы
	// увидите в личном кабинете ЮKassa, а пользователь — при
	// оплате. Например: «Оплата заказа № 72 для user@yoomoney.ru».
	Description OptString `json:"description"`
	// Сохранение платежных данных (с их помощью можно
	// проводить повторные безакцептные списания ).
	// Значение true инициирует создание многоразового
	// payment_method.
	SavePaymentMethod OptBool `json:"save_payment_method"`
	// Идентификатор сохраненного способа оплаты.
	PaymentMethodID OptString   `json:"payment_method_id"`
	Metadata        OptMetadata `json:"metadata"`
}

// GetAmount returns the value of Amount.
func (s *Payment) GetAmount() PaymentAmount {
	return s.Amount
}

// GetConfirmation returns the value of Confirmation.
func (s *Payment) GetConfirmation() OptPaymentConfirmation {
	return s.Confirmation
}

// GetCapture returns the value of Capture.
func (s *Payment) GetCapture() OptBool {
	return s.Capture
}

// GetDescription returns the value of Description.
func (s *Payment) GetDescription() OptString {
	return s.Description
}

// GetSavePaymentMethod returns the value of SavePaymentMethod.
func (s *Payment) GetSavePaymentMethod() OptBool {
	return s.SavePaymentMethod
}

// GetPaymentMethodID returns the value of PaymentMethodID.
func (s *Payment) GetPaymentMethodID() OptString {
	return s.PaymentMethodID
}

// GetMetadata returns the value of Metadata.
func (s *Payment) GetMetadata() OptMetadata {
	return s.Metadata
}

// SetAmount sets the value of Amount.
func (s *Payment) SetAmount(val PaymentAmount) {
	s.Amount = val
}

// SetConfirmation sets the value of Confirmation.
func (s *Payment) SetConfirmation(val OptPaymentConfirmation) {
	s.Confirmation = val
}

// SetCapture sets the value of Capture.
func (s *Payment) SetCapture(val OptBool) {
	s.Capture = val
}

// SetDescription sets the value of Description.
func (s *Payment) SetDescription(val OptString) {
	s.Description = val
}

// SetSavePaymentMethod sets the value of SavePaymentMethod.
func (s *Payment) SetSavePaymentMethod(val OptBool) {
	s.SavePaymentMethod = val
}

// SetPaymentMethodID sets the value of PaymentMethodID.
func (s *Payment) SetPaymentMethodID(val OptString) {
	s.PaymentMethodID = val
}

// SetMetadata sets the value of Metadata.
func (s *Payment) SetMetadata(val OptMetadata) {
	s.Metadata = val
}

// Сумма платежа. Иногда партнеры ЮKassa берут с
// пользователя дополнительную комиссию, которая не
// входит в эту сумму.
type PaymentAmount struct {
	// Трехбуквенный код валюты в формате ISO-4217. Пример: RUB.
	// Должен соответствовать валюте субаккаунта (recipient.
	// gateway_id), если вы разделяете потоки платежей, и валюте
	// аккаунта (shopId в личном кабинете), если не разделяете.
	Currency PaymentAmountCurrency `json:"currency"`
	// Сумма в выбранной валюте. Всегда дробное значение.
	// Разделитель дробной части — точка, разделитель тысяч
	// отсутствует. Количество знаков после точки зависит
	// от выбранной валюты. Пример: 1000.00.
	Value string `json:"value"`
}

// GetCurrency returns the value of Currency.
func (s *PaymentAmount) GetCurrency() PaymentAmountCurrency {
	return s.Currency
}

// GetValue returns the value of Value.
func (s *PaymentAmount) GetValue() string {
	return s.Value
}

// SetCurrency sets the value of Currency.
func (s *PaymentAmount) SetCurrency(val PaymentAmountCurrency) {
	s.Currency = val
}

// SetValue sets the value of Value.
func (s *PaymentAmount) SetValue(val string) {
	s.Value = val
}

// Трехбуквенный код валюты в формате ISO-4217. Пример: RUB.
// Должен соответствовать валюте субаккаунта (recipient.
// gateway_id), если вы разделяете потоки платежей, и валюте
// аккаунта (shopId в личном кабинете), если не разделяете.
type PaymentAmountCurrency string

const (
	PaymentAmountCurrencyRUB PaymentAmountCurrency = "RUB"
)

// AllValues returns all PaymentAmountCurrency values.
func (PaymentAmountCurrency) AllValues() []PaymentAmountCurrency {
	return []PaymentAmountCurrency{
		PaymentAmountCurrencyRUB,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentAmountCurrency) MarshalText() ([]byte, error) {
	switch s {
	case PaymentAmountCurrencyRUB:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentAmountCurrency) UnmarshalText(data []byte) error {
	switch PaymentAmountCurrency(data) {
	case PaymentAmountCurrencyRUB:
		*s = PaymentAmountCurrencyRUB
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// PaymentConfirmation represents sum type.
type PaymentConfirmation struct {
	Type                        PaymentConfirmationType // switch on this field
	PaymentConfirmationEmbedded PaymentConfirmationEmbedded
}

// PaymentConfirmationType is oneOf type of PaymentConfirmation.
type PaymentConfirmationType string

// Possible values for PaymentConfirmationType.
const (
	PaymentConfirmationEmbeddedPaymentConfirmation PaymentConfirmationType = "PaymentConfirmationEmbedded"
)

// IsPaymentConfirmationEmbedded reports whether PaymentConfirmation is PaymentConfirmationEmbedded.
func (s PaymentConfirmation) IsPaymentConfirmationEmbedded() bool {
	return s.Type == PaymentConfirmationEmbeddedPaymentConfirmation
}

// SetPaymentConfirmationEmbedded sets PaymentConfirmation to PaymentConfirmationEmbedded.
func (s *PaymentConfirmation) SetPaymentConfirmationEmbedded(v PaymentConfirmationEmbedded) {
	s.Type = PaymentConfirmationEmbeddedPaymentConfirmation
	s.PaymentConfirmationEmbedded = v
}

// GetPaymentConfirmationEmbedded returns PaymentConfirmationEmbedded and true boolean if PaymentConfirmation is PaymentConfirmationEmbedded.
func (s PaymentConfirmation) GetPaymentConfirmationEmbedded() (v PaymentConfirmationEmbedded, ok bool) {
	if !s.IsPaymentConfirmationEmbedded() {
		return v, false
	}
	return s.PaymentConfirmationEmbedded, true
}

// NewPaymentConfirmationEmbeddedPaymentConfirmation returns new PaymentConfirmation from PaymentConfirmationEmbedded.
func NewPaymentConfirmationEmbeddedPaymentConfirmation(v PaymentConfirmationEmbedded) PaymentConfirmation {
	var s PaymentConfirmation
	s.SetPaymentConfirmationEmbedded(v)
	return s
}

// Ref: #/components/schemas/PaymentConfirmationEmbedded
type PaymentConfirmationEmbedded struct {
	// Значение — embedded.
	// Код сценария подтверждения.
	Type PaymentConfirmationEmbeddedType `json:"type"`
	// Язык интерфейса, писем и смс, которые будет видеть или
	// получать пользователь. Формат соответствует ISO/IEC 15897.
	// Возможные значения: ru_RU, en_US. Регистр важен.
	Locale OptString `json:"locale"`
}

// GetType returns the value of Type.
func (s *PaymentConfirmationEmbedded) GetType() PaymentConfirmationEmbeddedType {
	return s.Type
}

// GetLocale returns the value of Locale.
func (s *PaymentConfirmationEmbedded) GetLocale() OptString {
	return s.Locale
}

// SetType sets the value of Type.
func (s *PaymentConfirmationEmbedded) SetType(val PaymentConfirmationEmbeddedType) {
	s.Type = val
}

// SetLocale sets the value of Locale.
func (s *PaymentConfirmationEmbedded) SetLocale(val OptString) {
	s.Locale = val
}

// Значение — embedded.
// Код сценария подтверждения.
type PaymentConfirmationEmbeddedType string

const (
	PaymentConfirmationEmbeddedTypeEmbedded PaymentConfirmationEmbeddedType = "embedded"
	PaymentConfirmationEmbeddedTypeExternal PaymentConfirmationEmbeddedType = "external"
)

// AllValues returns all PaymentConfirmationEmbeddedType values.
func (PaymentConfirmationEmbeddedType) AllValues() []PaymentConfirmationEmbeddedType {
	return []PaymentConfirmationEmbeddedType{
		PaymentConfirmationEmbeddedTypeEmbedded,
		PaymentConfirmationEmbeddedTypeExternal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentConfirmationEmbeddedType) MarshalText() ([]byte, error) {
	switch s {
	case PaymentConfirmationEmbeddedTypeEmbedded:
		return []byte(s), nil
	case PaymentConfirmationEmbeddedTypeExternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentConfirmationEmbeddedType) UnmarshalText(data []byte) error {
	switch PaymentConfirmationEmbeddedType(data) {
	case PaymentConfirmationEmbeddedTypeEmbedded:
		*s = PaymentConfirmationEmbeddedTypeEmbedded
		return nil
	case PaymentConfirmationEmbeddedTypeExternal:
		*s = PaymentConfirmationEmbeddedTypeExternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PaymentStatus
type PaymentStatus string

const (
	PaymentStatusPending           PaymentStatus = "pending"
	PaymentStatusWaitingForCapture PaymentStatus = "waiting_for_capture"
	PaymentStatusSucceeded         PaymentStatus = "succeeded"
	PaymentStatusCanceled          PaymentStatus = "canceled"
)

// AllValues returns all PaymentStatus values.
func (PaymentStatus) AllValues() []PaymentStatus {
	return []PaymentStatus{
		PaymentStatusPending,
		PaymentStatusWaitingForCapture,
		PaymentStatusSucceeded,
		PaymentStatusCanceled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PaymentStatus) MarshalText() ([]byte, error) {
	switch s {
	case PaymentStatusPending:
		return []byte(s), nil
	case PaymentStatusWaitingForCapture:
		return []byte(s), nil
	case PaymentStatusSucceeded:
		return []byte(s), nil
	case PaymentStatusCanceled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PaymentStatus) UnmarshalText(data []byte) error {
	switch PaymentStatus(data) {
	case PaymentStatusPending:
		*s = PaymentStatusPending
		return nil
	case PaymentStatusWaitingForCapture:
		*s = PaymentStatusWaitingForCapture
		return nil
	case PaymentStatusSucceeded:
		*s = PaymentStatusSucceeded
		return nil
	case PaymentStatusCanceled:
		*s = PaymentStatusCanceled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type V3PaymentsGetOK struct {
	Limit      OptInt    `json:"limit"`
	NextCursor OptString `json:"next_cursor"`
	Type       OptString `json:"type"`
	Items      []Payment `json:"items"`
}

// GetLimit returns the value of Limit.
func (s *V3PaymentsGetOK) GetLimit() OptInt {
	return s.Limit
}

// GetNextCursor returns the value of NextCursor.
func (s *V3PaymentsGetOK) GetNextCursor() OptString {
	return s.NextCursor
}

// GetType returns the value of Type.
func (s *V3PaymentsGetOK) GetType() OptString {
	return s.Type
}

// GetItems returns the value of Items.
func (s *V3PaymentsGetOK) GetItems() []Payment {
	return s.Items
}

// SetLimit sets the value of Limit.
func (s *V3PaymentsGetOK) SetLimit(val OptInt) {
	s.Limit = val
}

// SetNextCursor sets the value of NextCursor.
func (s *V3PaymentsGetOK) SetNextCursor(val OptString) {
	s.NextCursor = val
}

// SetType sets the value of Type.
func (s *V3PaymentsGetOK) SetType(val OptString) {
	s.Type = val
}

// SetItems sets the value of Items.
func (s *V3PaymentsGetOK) SetItems(val []Payment) {
	s.Items = val
}

// YookassaHookPostOK is response for YookassaHookPost operation.
type YookassaHookPostOK struct{}

type YookassaHookPostReq struct {
	Type   YookassaHookPostReqType  `json:"type"`
	Event  YookassaHookPostReqEvent `json:"event"`
	Object Payment                  `json:"object"`
}

// GetType returns the value of Type.
func (s *YookassaHookPostReq) GetType() YookassaHookPostReqType {
	return s.Type
}

// GetEvent returns the value of Event.
func (s *YookassaHookPostReq) GetEvent() YookassaHookPostReqEvent {
	return s.Event
}

// GetObject returns the value of Object.
func (s *YookassaHookPostReq) GetObject() Payment {
	return s.Object
}

// SetType sets the value of Type.
func (s *YookassaHookPostReq) SetType(val YookassaHookPostReqType) {
	s.Type = val
}

// SetEvent sets the value of Event.
func (s *YookassaHookPostReq) SetEvent(val YookassaHookPostReqEvent) {
	s.Event = val
}

// SetObject sets the value of Object.
func (s *YookassaHookPostReq) SetObject(val Payment) {
	s.Object = val
}

type YookassaHookPostReqEvent string

const (
	YookassaHookPostReqEventPaymentWaitingForCapture YookassaHookPostReqEvent = "payment.waiting_for_capture"
	YookassaHookPostReqEventPaymentSucceeded         YookassaHookPostReqEvent = "payment.succeeded"
	YookassaHookPostReqEventPaymentCanceled          YookassaHookPostReqEvent = "payment.canceled"
	YookassaHookPostReqEventRefundSucceeded          YookassaHookPostReqEvent = "refund.succeeded"
	YookassaHookPostReqEventPayoutSucceeded          YookassaHookPostReqEvent = "payout.succeeded"
	YookassaHookPostReqEventPayoutCanceled           YookassaHookPostReqEvent = "payout.canceled"
	YookassaHookPostReqEventDealClosed               YookassaHookPostReqEvent = "deal.closed"
)

// AllValues returns all YookassaHookPostReqEvent values.
func (YookassaHookPostReqEvent) AllValues() []YookassaHookPostReqEvent {
	return []YookassaHookPostReqEvent{
		YookassaHookPostReqEventPaymentWaitingForCapture,
		YookassaHookPostReqEventPaymentSucceeded,
		YookassaHookPostReqEventPaymentCanceled,
		YookassaHookPostReqEventRefundSucceeded,
		YookassaHookPostReqEventPayoutSucceeded,
		YookassaHookPostReqEventPayoutCanceled,
		YookassaHookPostReqEventDealClosed,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s YookassaHookPostReqEvent) MarshalText() ([]byte, error) {
	switch s {
	case YookassaHookPostReqEventPaymentWaitingForCapture:
		return []byte(s), nil
	case YookassaHookPostReqEventPaymentSucceeded:
		return []byte(s), nil
	case YookassaHookPostReqEventPaymentCanceled:
		return []byte(s), nil
	case YookassaHookPostReqEventRefundSucceeded:
		return []byte(s), nil
	case YookassaHookPostReqEventPayoutSucceeded:
		return []byte(s), nil
	case YookassaHookPostReqEventPayoutCanceled:
		return []byte(s), nil
	case YookassaHookPostReqEventDealClosed:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *YookassaHookPostReqEvent) UnmarshalText(data []byte) error {
	switch YookassaHookPostReqEvent(data) {
	case YookassaHookPostReqEventPaymentWaitingForCapture:
		*s = YookassaHookPostReqEventPaymentWaitingForCapture
		return nil
	case YookassaHookPostReqEventPaymentSucceeded:
		*s = YookassaHookPostReqEventPaymentSucceeded
		return nil
	case YookassaHookPostReqEventPaymentCanceled:
		*s = YookassaHookPostReqEventPaymentCanceled
		return nil
	case YookassaHookPostReqEventRefundSucceeded:
		*s = YookassaHookPostReqEventRefundSucceeded
		return nil
	case YookassaHookPostReqEventPayoutSucceeded:
		*s = YookassaHookPostReqEventPayoutSucceeded
		return nil
	case YookassaHookPostReqEventPayoutCanceled:
		*s = YookassaHookPostReqEventPayoutCanceled
		return nil
	case YookassaHookPostReqEventDealClosed:
		*s = YookassaHookPostReqEventDealClosed
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type YookassaHookPostReqType string

const (
	YookassaHookPostReqTypeNotification YookassaHookPostReqType = "notification"
)

// AllValues returns all YookassaHookPostReqType values.
func (YookassaHookPostReqType) AllValues() []YookassaHookPostReqType {
	return []YookassaHookPostReqType{
		YookassaHookPostReqTypeNotification,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s YookassaHookPostReqType) MarshalText() ([]byte, error) {
	switch s {
	case YookassaHookPostReqTypeNotification:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *YookassaHookPostReqType) UnmarshalText(data []byte) error {
	switch YookassaHookPostReqType(data) {
	case YookassaHookPostReqTypeNotification:
		*s = YookassaHookPostReqTypeNotification
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
